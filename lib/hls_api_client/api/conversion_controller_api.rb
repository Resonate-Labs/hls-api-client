=begin
#HLS Conversion batch controller

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module HlsApiClient
  class ConversionControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Do-nothing, replies with the input; this exists just facilitate using the CallbackConvert datatype to receive callbacks
    # @param convert_callback [ConvertCallback] 
    # @param [Hash] opts the optional parameters
    # @return [ConvertCallback]
    def callback_echo(convert_callback, opts = {})
      data, _status_code, _headers = callback_echo_with_http_info(convert_callback, opts)
      data
    end

    # Do-nothing, replies with the input; this exists just facilitate using the CallbackConvert datatype to receive callbacks
    # @param convert_callback [ConvertCallback] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConvertCallback, Integer, Hash)>] ConvertCallback data, response status code and response headers
    def callback_echo_with_http_info(convert_callback, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversionControllerApi.callback_echo ...'
      end
      # verify the required parameter 'convert_callback' is set
      if @api_client.config.client_side_validation && convert_callback.nil?
        fail ArgumentError, "Missing the required parameter 'convert_callback' when calling ConversionControllerApi.callback_echo"
      end
      # resource path
      local_var_path = '/api/v2/callbackEcho'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(convert_callback)

      # return_type
      return_type = opts[:debug_return_type] || 'ConvertCallback'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ConversionControllerApi.callback_echo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversionControllerApi#callback_echo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start a conversion job
    # @param convert_request [ConvertRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def convert(convert_request, opts = {})
      convert_with_http_info(convert_request, opts)
      nil
    end

    # Start a conversion job
    # @param convert_request [ConvertRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def convert_with_http_info(convert_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversionControllerApi.convert ...'
      end
      # verify the required parameter 'convert_request' is set
      if @api_client.config.client_side_validation && convert_request.nil?
        fail ArgumentError, "Missing the required parameter 'convert_request' when calling ConversionControllerApi.convert"
      end
      # resource path
      local_var_path = '/api/v2/convert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(convert_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ConversionControllerApi.convert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversionControllerApi#convert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete artifacts from a given job
    # @param delete_request [DeleteRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_job_results(delete_request, opts = {})
      delete_job_results_with_http_info(delete_request, opts)
      nil
    end

    # Delete artifacts from a given job
    # @param delete_request [DeleteRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_job_results_with_http_info(delete_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversionControllerApi.delete_job_results ...'
      end
      # verify the required parameter 'delete_request' is set
      if @api_client.config.client_side_validation && delete_request.nil?
        fail ArgumentError, "Missing the required parameter 'delete_request' when calling ConversionControllerApi.delete_job_results"
      end
      # resource path
      local_var_path = '/api/v2/delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(delete_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ConversionControllerApi.delete_job_results",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversionControllerApi#delete_job_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
